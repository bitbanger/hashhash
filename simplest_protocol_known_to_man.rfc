Sol Boucher and lane Lawley
#hashtable Protocol Documentation

FORMAT
			0		1
	+------------------+
	|  length* opcode  | (HEY, BYE, THX, FKU, SUP)
	+------------------+

			0		1		2		3
	+----------------------------------+
	|  length* opcode	count*	  key  | (HRZ)
	+----------------------------------+

			0		1		2		3
	+----------------------------------+
	|  length* opcode              key  | (PLZ)
	+----------------------------------+

			0		1		2
	+--------------------------+
	|  length* opcode 	 data  | (STF)
	+--------------------------+

OPCODES
	  1 PLZ (read request)					requires: key
	  2 HRZ (write request)					requires: key, followed by data
	  4 STF (data packet)						requires: more STF if under maximum number of bytes**
	  8 HEY (slave joins master)				doesn't require: shit
	 16 BYE (slave deserts master)			doesn't require: shit
	 32 THX (master plays along)				doesn't require: shit
	 64 FKU (master has problem with slave)	doesn't require: shit
	128 SUP (slave hearbeat)					doesn't require: shit

	* 16-bit unsigned integer
	** 512 B

PORTS
	CLIENT
		ephemeral port for communications

	MASTER
		client-facing port
		registration port
		heartbeat port
		ephemeral port for each slave

	SLAVE
		main port
		ephemeral port for heartbeats

PROCEDURES
	SLAVE REGISTRATION
		1. Slave sends HEY from its main port to master's registration port
		2. Master establishes new ephemeral port and opens TCP connection to slave's main port
		3. Master sends THX over the new connection, leaving it open
		4. Slave establishes new ephemeral port and opens TCP conection to master's heartbeat port

	SLAVE HEARTBEAT
		1. Slave periodically sends SUP from its heartbeat port to master's heartbeat port
		2. If master fails to receive a certain slave's heartbeat, it stops using it
		3. If disowned slaves attempt to do anything, including keepalive, they receive an FKU

	CLIENT REQUEST
		1. Client sends PLZ.
		2. Master says HRZ.
		3. Client says THX.
		4. Master starts sending STF.

	CLIENT TRANSMISSION
		1. Client says HRZ.
		2. Master says THX.
		3. Client starts sending STF.

MASTER DESIGN
	THREADS
		main: accept()s clients, spawns thread for each
		client (1 for each): handles actual work
		registration: accept()s slaves, stores their information, opens control connections
		heartbeat: iterates over slaves, recv(NOWAIT)ing to set inactive and invalidate fds

	CLIENT SHENANEGANS
		get instruction from client
		asks which slave should service
		locks on slave's queue
			adds self identifier to slave's queue
			while not first in slave's queue
				waits on slave's queue
		unlocks on slave's queue
		if slave is inactive
			go back and select a different slave
		does its slave work (using the control fd from the common data structure)
		update mapping table if necessary
		if interrupted (by broken fd)
			go back and reselect a different slave
		lock on slave's queue
			remove self from queue
		unlock on slave's queue
		send stuff back to client

ERRATA
	No comments are actually desired. In fact, any comments submitted will be despised. Commentors will be deposed.
